;;; obsidian.el --- Obsidian Notes interface -*- coding: utf-8; lexical-binding: t; -*-

;; Copyright (c) 2022 Mykhaylo Bilyanskyy <mb@blaster.ai>

;; Author: Mykhaylo Bilyanskyy
;; URL: https://github.com./licht1stein/obsidian.el
;; Keywords: obsidian, pkm, convenience
;; Version: 1.0.1
;; Package-Requires: ((emacs "27.2") (company "0.9.13") (s "1.12.0") (dash "2.13") (org "9.5.3") (markdown-mode "2.6"))

;; This file is NOT part of GNU Emacs.

;;; License:
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.


;;; Commentary:
;;
;; obsidian.el lets you interact with more convenience with markdown files
;; that are contained in Obsidian Notes vault.  It adds autocompletion for
;; tags and links, jumping between notes, capturing new notes into inbox etc.

;;; Code:
(require 'dash)
(require 's)

(require 'cl-lib)
(require 'company)

(require 'org)
(require 'markdown-mode)

;; Clojure style comment
(defmacro obsidian-comment (&rest _)
  "Ignore body, yield nil."
  nil)

(obsidian-comment
 (package-buffer-info))

(defcustom obsidian-directory nil
  "Path to Obsidian Notes vault."
  :group 'obsidian
  :type 'directory)

(defcustom obsidian-inbox-directory nil
  "Subdir to create notes using `obsidian-capture'."
  :group 'obsidian
  :type 'directory)

(eval-when-compile (defvar local-minor-modes))

(defvar obsidian--tags-list nil "List of Obsidian Notes tags generated by obsidian.el.")
(defvar obsidian--tag-regex "#[[:alnum:]-_=+]+" "Regex pattern used to find tags in Obsidian files.")

(defun obsidian-specify-path (&optional path)
  "Specifies obsidian folder PATH to obsidian-folder variable.
n
When run interactively asks user to specify the path."
  (interactive)
  (->> (or path (read-directory-name "Specify path to Obsidian folder"))
       (expand-file-name)
       (customize-set-value 'obsidian-directory)))

(obsidian-comment
 (obsidian-specify-path)
 "Use the below vault for testing and development"
 (obsidian-specify-path "./tests/test_vault"))

;;; File utilities
;; Copied from org-roam's org-roam-descendant-of-p
(defun obsidian-descendant-of-p (a b)
  "Return t if A is descendant of B."
  (unless (equal (file-truename a) (file-truename b))
    (string-prefix-p (replace-regexp-in-string "^\\([A-Za-z]\\):" #'downcase (expand-file-name b) t t)
		     (replace-regexp-in-string "^\\([A-Za-z]\\):" #'downcase (expand-file-name a) t t))))

(defun obsidian-not-trash? (file)
  "Return t if FILE is not in .trash of Obsidian."
  (not (s-contains? "/.trash" file)))

(defun obsidian-file? (&optional file)
  "Return t if FILE is an obsidian.el file, nil otherwise.

If FILE is not specified, use the current buffer's file-path.
FILE is an Org-roam file if:
- It's located somewhere under `obsidian-directory
- It is a markdown .md file
- It is not in .trash
- It is not an Emacs temp file"
  (-when-let* ((path (or file (-> (buffer-base-buffer) buffer-file-name)))
	       (relative-path (file-relative-name path obsidian-directory))
	       (ext (file-name-extension relative-path))
	       (md? (string= ext "md"))
	       (obsidian-dir? (obsidian-descendant-of-p path obsidian-directory))
	       (not-trash? (obsidian-not-trash? path))
	       (not-temp? (not (s-contains? "~" relative-path))))
    t))

(defun obsidian--file-relative-name (f)
  "Take file name F and return relative path for `obsidian-directory'."
  (file-relative-name f obsidian-directory))

(defun obsidian--expand-file-name (f)
  "Take relative file name F and return expanded name."
  (expand-file-name f obsidian-directory))

(defun obsidian-list-all-files ()
  "Lists all Obsidian Notes files that are not in trash.

Obsidian notes files:
- Pass the `obsidian-file?' check"
  (->> (directory-files-recursively obsidian-directory "\.*$")
       (-filter #'obsidian-file?)))

(obsidian-comment
 "#tag1 #tag2"

 (setq sample-file "~/Sync/Zettelkasten/Literature/Самадхи у Кинга.md")
 (obsidian-descendant-of-p sample-file obsidian-directory) ;; => t
 (obsidian-file?)					   ;; => nil
 (obsidian-file? "~/Sync/Zettelkasten/Literature/Самадхи у Кинга.md") ;; => t
 (obsidian-file? "~/Sync/Zettelkasten/.trash/2021-10-26.md") ;; => nil
 )

(defun obsidian-read-file-or-buffer (&optional file)
  "Return string contents of a file or current buffer.

If FILE is not specified, use the current buffer."
  (if file
      (with-temp-buffer
	(insert-file-contents file)
	(buffer-substring-no-properties (point-min) (point-max)))
    (buffer-substring-no-properties (point-min) (point-max))))

(defun obsidian-find-tags (s)
  "Finda all #tags in string.
Argument S string to find tags in."
  (->> (s-match-strings-all obsidian--tag-regex s)
       -flatten))

(defun obsidian-tag? (s)
  "Return t if S will match `obsidian--tag-regex', else nil."
  (when (s-match obsidian--tag-regex s)
    t))

(obsidian-comment
 (obsidian-tag? "#foo"))

(defun obsidian-find-tags-in-file (&optional file)
  "Return all tags in file or current buffer.

If FILE is not specified, use the current buffer"
  (-> (obsidian-read-file-or-buffer file)
      obsidian-find-tags
      -distinct))

(defun obsidian-list-all-tags ()
  "Find all tags in all obsidian files."
  (->> (obsidian-list-all-files)
       (mapcar #'obsidian-find-tags-in-file)
       -flatten
       -distinct))

(obsidian-comment
 (obsidian-read-file-or-buffer)
 (obsidian-read-file-or-buffer sample-file)
 (obsidian-find-tags "foo #foo # #тэг-такой spam") ;; => ("#foo" "#тэг-такой")
 (obsidian-find-tags-in-file)
 (obsidian-find-tags-in-file sample-file)
 (obsidian-list-all-tags))

(defun obsidian-update-tags-list ()
  "Scans entire Obsidian vault and update all tags for completion."
  (->> (obsidian-list-all-tags)
       (setq obsidian--tags-list))
  (message "Obsidian tags updated"))

(obsidian-comment
 (obsidian-update-tags-list))

(define-minor-mode obsidian-mode
  "Toggle minor `obsidian-mode' on and off.

Interactively with no argument, this command toggles the mode.
A positive prefix argument enables the mode, any other prefix
argument disables it.  From Lisp, argument omitted or nil enables
the mode, `toggle' toggles the state."
  ;; The initial value.
  :init-value nil
  :lighter "obs"
  :after-hook (obsidian-update-tags-list)
  :keymap (make-sparse-keymap))

(defun obsidian-prepare-tags-list (tags)
  "Prepare a list of TAGS with both lower-case and capitalized versions.

Obsidian Notes doesn't considers tags to be the same no matter their case.
Sometimes it's convenient to capitalize a tag, for example when using it
at the start of the sentence.  This function allows completion with both
lower and upper case versions of the tags."
  (let* ((lower-case (->> tags
			  (-map (lambda (s) (s-replace "#" "" s)))
			  (-map #'s-downcase)))
	 (capitalized (-map #'s-capitalize lower-case))
	 (merged (-concat tags lower-case capitalized)))
    (->> merged
	 (-map (lambda (s) (s-concat "#" s)))
	 -distinct)))

(obsidian-comment
 (->> (obsidian-list-all-tags)
      (obsidian-prepare-tags-list)))

(defun obsidian-tags-backend (command &optional arg &rest ignored)
  "Completion backend for company used by obsidian.el.
Argument COMMAND company command.
Optional argument ARG word to complete.
Optional argument IGNORED this is ignored."
  (interactive (list 'interactive))

  (cl-case command
    (interactive (company-begin-backend 'obsidian-tags-backend))
    (prefix (when (and
		   (-contains? local-minor-modes 'obsidian-mode)
		   (looking-back obsidian--tag-regex nil))
	      (match-string 0)))
    (candidates (->> obsidian--tags-list
		     obsidian-prepare-tags-list
		     (-filter (lambda (s) (s-starts-with? arg s)))))))

(defun obsidian-enable-minor-mode ()
  "Check if current buffer is an `obsidian-file?' and enable minor `obsidian-mode'."
  (when (obsidian-file?)
    (obsidian-mode t)))

(defun obsidian-update ()
  "Command update everything there is to update in obsidian.el (tags, links etc.)."
  (interactive)
  (obsidian-update-tags-list)
  (message "obsidian.el updated"))

(defun obsidian--request-link ()
  "Service function to request user for link iput."
  (let* ((all-files (->> (obsidian-list-all-files) (-map (lambda (f) (file-relative-name f obsidian-directory)))))
	 (region (when (org-region-active-p)
		   (buffer-substring-no-properties (region-beginning) (region-end))))
	 (chosen-file (completing-read "Link: " all-files))
	 (default-description (-> chosen-file file-name-nondirectory file-name-sans-extension))
	 (description (read-from-minibuffer "Description: " (or region default-description))))
    (list :file chosen-file :description description)))

(defun obsidian-insert-wikilink ()
  "Insert a link to file in wikiling format."
  (interactive)
  (let* ((file (obsidian--request-link)))
    (-> (s-concat "[[" (plist-get file :file) "|" (plist-get file :description) "]]")
	insert)))

(defun obsidian-insert-link ()
  "Insert a link to file in markdown format."
  (interactive)
  (let* ((file (obsidian--request-link)))
    (-> (s-concat "[" (plist-get file :description) "](" (->> (plist-get file :file) (s-replace " " "%20")) ")")
	insert)))

(defun obsidian-capture ()
  "Create new obsidian note.

In the `obsidian-inbox-directory' if set otherwise in `obsidian-directory' root."
  (interactive)
  (let* ((title (read-from-minibuffer "Title: "))
	 (filename (s-concat obsidian-directory "/" obsidian-inbox-directory "/" title ".md"))
	 (clean-filename (s-replace "//" "/" filename)))
    (find-file (expand-file-name clean-filename) t)))

(defun obsidian-jump ()
  "Jump to Obsidian note."
  (interactive)
  (let* ((files (obsidian-list-all-files))
	 (dict (-map (lambda (f) (cons (file-relative-name f obsidian-directory) f)) files))
	 (choice (completing-read "Jump to: " (-map #'car dict)))
	 (target (->> dict (-filter (lambda (s) (string= choice (car s)))) car cdr)))
    (find-file target)))

(defun obsidian-prepare-file-path (s)
  "Replace %20 with spaces in file path.
Argument S relative file name to clean and convert to absolute."
  (let* ((cleaned-name (s-replace "%20" " " s)))
    cleaned-name))

(defun obsidian--match-files (f all-files)
  "Filter ALL-FILES to return matches with the same name as F."
  (-filter (lambda (el) (s-ends-with? f el)) all-files))

(defun obsidian-find-file (f)
  "Take file F and either opens directly or offer choice if multiple matches."
  (let* ((all-files (->> (obsidian-list-all-files) (-map #'obsidian--file-relative-name)))
	 (matches (obsidian--match-files f all-files))
	 (file (if (> (length matches) 1)
		   (let* ((choice (completing-read "Jump to: " matches)))
		     choice)
		 f)))
    (-> file obsidian--expand-file-name find-file)))

(obsidian-comment
 (obsidian-prepare-file-path "subdir/1-sub.md")
 (obsidian-find-file "subdir/2-sub.md")
 (obsidian-find-file "1.md"))

(defun obsidian-wiki-link? ()
  "Return non-nil if `point' is at a true wiki link.
A true wiki link name matches `markdown-regex-wiki-link' but does
not match the current file name after conversion.  This modifies
the data returned by `match-data'.  Note that the potential wiki
link name must be available via `match-string'."
  (let ((case-fold-search nil))
    (and (thing-at-point-looking-at markdown-regex-wiki-link)
	 (not (markdown-code-block-at-point-p))
	 (or (not buffer-file-name)
	     (not (string-equal (buffer-file-name)
				(markdown-wiki-link-link)))))))

(defun obsidian-follow-wiki-link-at-point ()
  "Find Wiki Link at point."
  (interactive)
  ;; (obsidian-wiki-link?)
  (thing-at-point-looking-at markdown-regex-wiki-link)
  (let* ((url (->> (match-string-no-properties 3)
		   s-trim)))
    (if (s-contains? ":" url)
	(browse-url url)
      (-> url obsidian-prepare-file-path obsidian-find-file))))

(defun obsidian-follow-markdown-link-at-point ()
  "Find and follow markdown link at point."
  (interactive)
  (let ((normalized (s-replace "%20" " " (markdown-link-url))))
    (if (s-contains? ":" normalized)
	(browse-url normalized)
      (-> normalized
	  obsidian-prepare-file-path
	  obsidian-find-file))))

(defun obsidian-follow-link-at-point ()
  "Follow thing at point if possible, such as a reference link or wiki link.
Opens inline and reference links in a browser.  Opens wiki links
to other files in the current window, or the another window if
ARG is non-nil.
See `markdown-follow-link-at-point' and
`markdown-follow-wiki-link-at-point'."
  (interactive)
  (cond ((markdown-link-p)
	 (obsidian-follow-markdown-link-at-point))
	((obsidian-wiki-link?)
	 (obsidian-follow-wiki-link-at-point))))

(add-hook 'markdown-mode-hook #'obsidian-enable-minor-mode)
(add-to-list 'company-backends #'obsidian-tags-backend)

;; (obsidian-comment
;;  (use-package obsidian
;;    :ensure nil
;;    :config (obsidian-specify-path "./tests/test_vault")
;;    :custom
;;    (obsidian-inbox-directory "Inbox")
;;    :bind (:map obsidian-mode-map
;; 	       ;; Replace C-c C-o with Obsidian.el's implementation. It's ok to use another key binding.
;; 	       ("C-c C-o" . obsidian-follow-link-at-point)
;; 	       ;; If you prefer you can use `obsidian-insert-wikilink'
;; 	       ("C-c C-l" . obsidian-insert-link))))

(provide 'obsidian)
;;; obsidian.el ends here
